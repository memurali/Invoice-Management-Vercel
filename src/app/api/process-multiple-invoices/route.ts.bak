import { NextRequest, NextResponse } from 'next/server';

export async function POST(request: NextRequest) {
  // VERSION CHECK: This should appear in console if new code is running
  console.log('🔧 API ROUTE VERSION: 2.0 - WITH TIMEOUT FIXES AND RETRY LOGIC');
  console.log('🚀 API ROUTE STARTED - process-multiple-invoices');
  console.log('🔥 NEW CODE IS RUNNING - IF YOU SEE THIS, THE DEPLOYMENT WORKED!');
  
  // SIMPLE TEST - Return immediately to see if route is working
  console.log('🧪 SIMPLE TEST - Route is being called!');
  
  try {
    console.log('📝 Step 1: Parsing form data...');
    const formData = await request.formData();
    const files = formData.getAll('files') as File[];

    console.log(`📁 Step 2: Found ${files?.length || 0} files`);
    
    if (!files || files.length === 0) {
      console.log('❌ ERROR: No files provided');
      return NextResponse.json(
        { success: false, message: 'No files provided' },
        { status: 400 }
      );
    }

    console.log('🔍 Step 3: Validating files...');
    // Validate all files are PDFs and check file size
    const maxFileSize = 5 * 1024 * 1024; // 5MB in bytes
    for (const file of files) {
      console.log(`📄 Validating file: ${file.name} (${file.type}, ${file.size} bytes)`);
      if (file.type !== 'application/pdf') {
        console.log(`❌ ERROR: File ${file.name} is not a PDF`);
        return NextResponse.json(
          { success: false, message: 'Only PDF files are supported' },
          { status: 400 }
        );
      }
      
      if (file.size > maxFileSize) {
        console.log(`❌ ERROR: File ${file.name} exceeds 5MB limit`);
        return NextResponse.json(
          { success: false, message: `File "${file.name}" exceeds 5MB limit. Please upload smaller files.` },
          { status: 400 }
        );
      }
    }
    console.log('✅ Step 3: File validation passed');

    console.log('🔧 Step 4: Getting backend URL...');
    // Get the backend API URL from environment variable
    const backendUrl = process.env.NEXT_PUBLIC_API_BASE_URL;
    console.log(`🌐 Backend URL: ${backendUrl || 'NOT SET'}`);
    
    if (!backendUrl) {
      console.log('❌ ERROR: Backend API URL not configured');
      const errorMessage = `
        Backend API URL not configured! 
        
        Please create a .env.local file in your project root with:
        NEXT_PUBLIC_API_BASE_URL=https://your-render-app-name.onrender.com
        
        Replace 'your-render-app-name' with your actual Render app name.
        Then restart the development server.
      `;
      
      return NextResponse.json(
        { 
          success: false, 
          message: 'Backend API URL not configured',
          details: errorMessage.trim(),
          setupRequired: true
        },
        { status: 500 }
      );
    }
    console.log('✅ Step 4: Backend URL configured');

    // Create FormData for the backend API
    const backendFormData = new FormData();
    files.forEach(file => {
      backendFormData.append('files', file);
    });

    // Test backend connectivity first with retry logic for Render cold start
    console.log('Testing backend connectivity...');
    let healthResponse;
    let retryCount = 0;
    const maxRetries = 3;
    
    while (retryCount < maxRetries) {
      try {
        console.log(`Health check attempt ${retryCount + 1}/${maxRetries}...`);
        healthResponse = await fetch(`${backendUrl}/api/v2/health`, {
          method: 'GET',
          signal: AbortSignal.timeout(30000) // 30 second timeout for health check (Render cold start)
        });
        
        if (healthResponse.ok) {
          console.log('Backend health check passed, proceeding with file processing...');
          break;
        } else {
          console.error(`Health check failed (attempt ${retryCount + 1}):`, healthResponse.status);
          retryCount++;
          if (retryCount < maxRetries) {
            console.log(`Retrying in 5 seconds...`);
            await new Promise(resolve => setTimeout(resolve, 5000));
          }
        }
      } catch (healthError) {
        console.error(`Health check error (attempt ${retryCount + 1}):`, healthError);
        retryCount++;
        if (retryCount < maxRetries) {
          console.log(`Retrying in 5 seconds...`);
          await new Promise(resolve => setTimeout(resolve, 5000));
        }
      }
    }
    
    if (!healthResponse || !healthResponse.ok) {
      return NextResponse.json(
        { 
          success: false, 
          message: 'Backend service is not accessible after multiple attempts.',
          details: 'Render service might be in sleep mode. Please try again in a few moments.'
        },
        { status: 503 }
      );
    }

    // Create AbortController for timeout handling
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), 600000); // 10 minutes timeout (Render cold start + processing)

    try {
      console.log('Starting file processing...');
      // Call the ULTRA-AGGRESSIVE batch processing endpoint with timeout
      const response = await fetch(`${backendUrl}/api/v2/parse-multiple-invoices/`, {
        method: 'POST',
        body: backendFormData,
        signal: controller.signal,
        headers: {
          // Add headers to help with timeout and connection issues
          'Connection': 'keep-alive',
          'Keep-Alive': 'timeout=120, max=1000'
        }
      });

      clearTimeout(timeoutId);

      if (!response.ok) {
        const errorText = await response.text();
        console.error(`Backend API error: ${response.status} - ${errorText}`);
        
        // Handle specific error codes
        if (response.status === 502) {
          return NextResponse.json(
            { 
              success: false, 
              message: 'Backend service temporarily unavailable. Please try uploading fewer files or try again later.',
              details: 'The backend service may be overloaded or experiencing issues.'
            },
            { status: 502 }
          );
        }
        
        if (response.status === 504) {
          return NextResponse.json(
            { 
              success: false, 
              message: 'Request timeout. The backend took too long to process the files.',
              details: 'Try uploading fewer files at once or check your internet connection.'
            },
            { status: 504 }
          );
        }
        
        return NextResponse.json(
          { success: false, message: `Backend API error: ${response.status} - ${errorText}` },
          { status: response.status }
        );
      }

      const result = await response.json();

      return NextResponse.json({
        success: true,
        message: 'Batch processing completed successfully',
        data: result
      });

    } catch (fetchError) {
      clearTimeout(timeoutId);
      
      if (fetchError instanceof Error && fetchError.name === 'AbortError') {
        return NextResponse.json(
          { 
            success: false, 
            message: 'Request timeout. The backend took too long to process the files.',
            details: 'Try uploading fewer files at once or try again later.'
          },
          { status: 408 }
        );
      }
      
      throw fetchError; // Re-throw to be caught by outer catch block
    }

  } catch (error) {
    console.error('Error processing multiple invoices:', error);
    console.error('Error details:', {
      name: error instanceof Error ? error.name : 'Unknown',
      message: error instanceof Error ? error.message : 'Unknown error',
      stack: error instanceof Error ? error.stack : 'No stack trace'
    });
    
    // Provide more specific error messages
    if (error instanceof Error) {
      if (error.message.includes('fetch') || error.message.includes('network')) {
        return NextResponse.json(
          { 
            success: false, 
            message: 'Network error. Unable to connect to the backend service.',
            details: `Error: ${error.message}. Please check your internet connection and try again.`
          },
          { status: 503 }
        );
      }
      
      if (error.message.includes('timeout')) {
        return NextResponse.json(
          { 
            success: false, 
            message: 'Request timeout. The backend took too long to respond.',
            details: 'Try uploading fewer files at once.'
          },
          { status: 408 }
        );
      }
    }
    
    return NextResponse.json(
      { 
        success: false, 
        message: 'Internal server error. Please try again later.',
        details: error instanceof Error ? error.message : 'Unknown error'
      },
      { status: 500 }
    );
  }
} 